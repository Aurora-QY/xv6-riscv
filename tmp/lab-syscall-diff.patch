diff --git a/Makefile b/Makefile
index f0beb51..49dfd51 100644
--- a/Makefile
+++ b/Makefile
@@ -149,7 +149,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+	$U/_trace\
+	$U/_sysinfotest\
 
 
 ifeq ($(LAB),trap)
diff --git a/kernel/defs.h b/kernel/defs.h
index 4b9bbc0..379c437 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -64,6 +64,8 @@ void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
 
+int		kfreemem(void);
+
 // log.c
 void            initlog(int, struct superblock*);
 void            log_write(struct buf*);
@@ -105,6 +107,8 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+int             n_proc(void);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..5aa9e17 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,16 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+//遍历所有freelist获取内存页数,乘页大小即为空闲内存
+int
+kfreemem(void) 
+{
+  struct run *r = kmem.freelist;
+  int n = 0;
+  while (r) {
+    n++;
+    r = r->next;
+  }
+  return n * PGSIZE;
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 6afafa1..3243060 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -127,6 +127,8 @@ found:
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+  //初始化进程掩码
+  p->traceMask = 0;
   return p;
 }
 
@@ -294,6 +296,9 @@ fork(void)
   pid = np->pid;
 
   np->state = RUNNABLE;
+  
+  //子进程继承父进程追踪设置
+  np->traceMask = p->traceMask;
 
   release(&np->lock);
 
@@ -693,3 +698,15 @@ procdump(void)
     printf("\n");
   }
 }
+
+//遍历proc数组,获取进程数目
+int
+n_proc(void)
+{
+  struct proc *p;
+  int n = 0;
+  for (p = proc; p < &proc[NPROC]; ++p)
+    if (p->state != UNUSED)
+      n++;
+  return n;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..b49c2ed 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -103,4 +103,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  
+  uint64 traceMask;	       // 掩码 用于识别是否执行了对应标记的系统调用
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..575507a 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -105,6 +105,9 @@ extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
 
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
+
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
 [SYS_exit]    sys_exit,
@@ -127,17 +130,51 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
+};
+
+//系统调用函数名称存储数组,方便打印输出
+const char* sysnames[] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_sysinfo] "sysinfo",
 };
 
 void
 syscall(void)
 {
   int num;
-  struct proc *p = myproc();
+  struct proc *p = myproc(); // 获取当前进程的 proc 结构
 
-  num = p->trapframe->a7;
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+  num = p->trapframe->a7; // 从 a7 寄存器中获取系统调用号
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) { // 调用相应的系统调用函数，将返回值存放在 a0 寄存器中
     p->trapframe->a0 = syscalls[num]();
+    if (p->traceMask & (1 << num)) { // 根据判断是否需要trace这个系统调用
+      // 1 << num的结果被用作一个掩码,用来检查进程是否设置了要跟踪特定的系统调用()
+      printf("%d: syscall %s -> %d\n", p->pid, sysnames[num], p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..6716e88 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+
+#define SYS_trace  22
+#define SYS_sysinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..52c5066 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "sysinfo.h"
 
 uint64
 sys_exit(void)
@@ -95,3 +96,30 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//作用:允许用户程序设置当前进程的追踪掩码
+uint64
+sys_trace(void)
+{
+  int mask;
+  if(argint(0, &mask) < 0) 
+    return -1;
+  myproc()->traceMask = mask;
+  return 0;
+}
+
+//获取空闲内存与进程数量的系统信息并写入用户态
+uint64
+sys_sysinfo(void) {
+  struct proc *my_proc = myproc();
+  uint64 p;
+  if(argaddr(0, &p) < 0) // 获取用户提供的buffer地址
+    return -1;
+  struct sysinfo my_sysinfo;// 构建sysinfo结构体并初始化
+  my_sysinfo.freemem = kfreemem();
+  my_sysinfo.nproc = n_proc();
+  // 复制该struct到用户态地址里去
+  if(copyout(my_proc->pagetable, p, (char *)&my_sysinfo, sizeof(my_sysinfo)) < 0)
+    return -1;
+  return 0;
+}
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..00750ed
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+3
diff --git a/user/user.h b/user/user.h
index b71ecda..60d465e 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,6 +1,8 @@
 struct stat;
 struct rtcdate;
 
+struct sysinfo;
+
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
@@ -24,6 +26,9 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 
+uint64 trace(int);
+uint64 sysinfo(struct sysinfo*);
+
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..fce5771 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+
+entry("trace");
+entry("sysinfo");
