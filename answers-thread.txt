没有同步机制时,一个线程的插入操作可能会覆盖另一个线程的插入操作,即insert操作非原子性(put和get也是)
例如，考虑有两个线程同时将键值对 [4, 'd'] 和 [5, 'e'] 添加到同一个桶中：
原始桶内容为 [<1, 'a'>, <2, 'b'>, <3, 'c'>]
在 put() 函数中，它们都会迭代到链表的末尾，并决定在 <3, 'c'> 的后面插入
无论哪个线程执行了 '*p = e' 这一行，都会导致另一边的改变被覆盖，从而丢失数据。
